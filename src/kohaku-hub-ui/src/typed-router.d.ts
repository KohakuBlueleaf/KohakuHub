/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[type]s/': RouteRecordInfo<'/[type]s/', '/:type()s', { type: ParamValue<true> }, { type: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/': RouteRecordInfo<'/[type]s/[namespace]/[name]/', '/:type()s/:namespace/:name', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/blob/[branch]/[...file]': RouteRecordInfo<'/[type]s/[namespace]/[name]/blob/[branch]/[...file]', '/:type()s/:namespace/:name/blob/:branch/:file(.*)', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true>, file: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false>, file: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/commits/[branch]/': RouteRecordInfo<'/[type]s/[namespace]/[name]/commits/[branch]/', '/:type()s/:namespace/:name/commits/:branch', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/tree/[branch]/': RouteRecordInfo<'/[type]s/[namespace]/[name]/tree/[branch]/', '/:type()s/:namespace/:name/tree/:branch', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/tree/[branch]/[...path]': RouteRecordInfo<'/[type]s/[namespace]/[name]/tree/[branch]/[...path]', '/:type()s/:namespace/:name/tree/:branch/:path(.*)', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true>, path: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false>, path: ParamValue<false> }>,
    '/[username]/': RouteRecordInfo<'/[username]/', '/:username', { username: ParamValue<true> }, { username: ParamValue<false> }>,
    '/[username]/[type]': RouteRecordInfo<'/[username]/[type]', '/:username/:type', { username: ParamValue<true>, type: ParamValue<true> }, { username: ParamValue<false>, type: ParamValue<false> }>,
    '/login': RouteRecordInfo<'/login', '/login', Record<never, never>, Record<never, never>>,
    '/new': RouteRecordInfo<'/new', '/new', Record<never, never>, Record<never, never>>,
    '/register': RouteRecordInfo<'/register', '/register', Record<never, never>, Record<never, never>>,
    '/settings': RouteRecordInfo<'/settings', '/settings', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/[type]s/index.vue': {
      routes: '/[type]s/'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/index.vue': {
      routes: '/[type]s/[namespace]/[name]/'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/blob/[branch]/[...file].vue': {
      routes: '/[type]s/[namespace]/[name]/blob/[branch]/[...file]'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/commits/[branch]/index.vue': {
      routes: '/[type]s/[namespace]/[name]/commits/[branch]/'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/tree/[branch]/index.vue': {
      routes: '/[type]s/[namespace]/[name]/tree/[branch]/'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/tree/[branch]/[...path].vue': {
      routes: '/[type]s/[namespace]/[name]/tree/[branch]/[...path]'
      views: never
    }
    'src/pages/[username]/index.vue': {
      routes: '/[username]/'
      views: never
    }
    'src/pages/[username]/[type].vue': {
      routes: '/[username]/[type]'
      views: never
    }
    'src/pages/login.vue': {
      routes: '/login'
      views: never
    }
    'src/pages/new.vue': {
      routes: '/new'
      views: never
    }
    'src/pages/register.vue': {
      routes: '/register'
      views: never
    }
    'src/pages/settings.vue': {
      routes: '/settings'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
