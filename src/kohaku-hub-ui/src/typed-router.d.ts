/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[type]s/': RouteRecordInfo<'/[type]s/', '/:type()s', { type: ParamValue<true> }, { type: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/': RouteRecordInfo<'/[type]s/[namespace]/[name]/', '/:type()s/:namespace/:name', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/blob/[branch]/[...file]': RouteRecordInfo<'/[type]s/[namespace]/[name]/blob/[branch]/[...file]', '/:type()s/:namespace/:name/blob/:branch/:file(.*)', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true>, file: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false>, file: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/commit/[commit_id]': RouteRecordInfo<'/[type]s/[namespace]/[name]/commit/[commit_id]', '/:type()s/:namespace/:name/commit/:commit_id', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, commit_id: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, commit_id: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/commits/[branch]/': RouteRecordInfo<'/[type]s/[namespace]/[name]/commits/[branch]/', '/:type()s/:namespace/:name/commits/:branch', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/edit/[branch]/[...file]': RouteRecordInfo<'/[type]s/[namespace]/[name]/edit/[branch]/[...file]', '/:type()s/:namespace/:name/edit/:branch/:file(.*)', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true>, file: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false>, file: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/settings': RouteRecordInfo<'/[type]s/[namespace]/[name]/settings', '/:type()s/:namespace/:name/settings', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/tree/[branch]/': RouteRecordInfo<'/[type]s/[namespace]/[name]/tree/[branch]/', '/:type()s/:namespace/:name/tree/:branch', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/tree/[branch]/[...path]': RouteRecordInfo<'/[type]s/[namespace]/[name]/tree/[branch]/[...path]', '/:type()s/:namespace/:name/tree/:branch/:path(.*)', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true>, path: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false>, path: ParamValue<false> }>,
    '/[type]s/[namespace]/[name]/upload/[branch]': RouteRecordInfo<'/[type]s/[namespace]/[name]/upload/[branch]', '/:type()s/:namespace/:name/upload/:branch', { type: ParamValue<true>, namespace: ParamValue<true>, name: ParamValue<true>, branch: ParamValue<true> }, { type: ParamValue<false>, namespace: ParamValue<false>, name: ParamValue<false>, branch: ParamValue<false> }>,
    '/[username]/': RouteRecordInfo<'/[username]/', '/:username', { username: ParamValue<true> }, { username: ParamValue<false> }>,
    '/[username]/[type]': RouteRecordInfo<'/[username]/[type]', '/:username/:type', { username: ParamValue<true>, type: ParamValue<true> }, { username: ParamValue<false>, type: ParamValue<false> }>,
    '/[username]/storage': RouteRecordInfo<'/[username]/storage', '/:username/storage', { username: ParamValue<true> }, { username: ParamValue<false> }>,
    '/about': RouteRecordInfo<'/about', '/about', Record<never, never>, Record<never, never>>,
    '/contributing': RouteRecordInfo<'/contributing', '/contributing', Record<never, never>, Record<never, never>>,
    '/docs/': RouteRecordInfo<'/docs/', '/docs', Record<never, never>, Record<never, never>>,
    '/docs/admin': RouteRecordInfo<'/docs/admin', '/docs/admin', Record<never, never>, Record<never, never>>,
    '/docs/api': RouteRecordInfo<'/docs/api', '/docs/api', Record<never, never>, Record<never, never>>,
    '/docs/cli': RouteRecordInfo<'/docs/cli', '/docs/cli', Record<never, never>, Record<never, never>>,
    '/docs/contributing': RouteRecordInfo<'/docs/contributing', '/docs/contributing', Record<never, never>, Record<never, never>>,
    '/docs/deployment': RouteRecordInfo<'/docs/deployment', '/docs/deployment', Record<never, never>, Record<never, never>>,
    '/docs/git': RouteRecordInfo<'/docs/git', '/docs/git', Record<never, never>, Record<never, never>>,
    '/docs/ports': RouteRecordInfo<'/docs/ports', '/docs/ports', Record<never, never>, Record<never, never>>,
    '/docs/setup': RouteRecordInfo<'/docs/setup', '/docs/setup', Record<never, never>, Record<never, never>>,
    '/get-started': RouteRecordInfo<'/get-started', '/get-started', Record<never, never>, Record<never, never>>,
    '/login': RouteRecordInfo<'/login', '/login', Record<never, never>, Record<never, never>>,
    '/new': RouteRecordInfo<'/new', '/new', Record<never, never>, Record<never, never>>,
    '/organizations/': RouteRecordInfo<'/organizations/', '/organizations', Record<never, never>, Record<never, never>>,
    '/organizations/[orgname]/': RouteRecordInfo<'/organizations/[orgname]/', '/organizations/:orgname', { orgname: ParamValue<true> }, { orgname: ParamValue<false> }>,
    '/organizations/[orgname]/[type]': RouteRecordInfo<'/organizations/[orgname]/[type]', '/organizations/:orgname/:type', { orgname: ParamValue<true>, type: ParamValue<true> }, { orgname: ParamValue<false>, type: ParamValue<false> }>,
    '/organizations/[orgname]/settings': RouteRecordInfo<'/organizations/[orgname]/settings', '/organizations/:orgname/settings', { orgname: ParamValue<true> }, { orgname: ParamValue<false> }>,
    '/organizations/[orgname]/storage': RouteRecordInfo<'/organizations/[orgname]/storage', '/organizations/:orgname/storage', { orgname: ParamValue<true> }, { orgname: ParamValue<false> }>,
    '/organizations/new': RouteRecordInfo<'/organizations/new', '/organizations/new', Record<never, never>, Record<never, never>>,
    '/privacy': RouteRecordInfo<'/privacy', '/privacy', Record<never, never>, Record<never, never>>,
    '/register': RouteRecordInfo<'/register', '/register', Record<never, never>, Record<never, never>>,
    '/self-hosted': RouteRecordInfo<'/self-hosted', '/self-hosted', Record<never, never>, Record<never, never>>,
    '/settings': RouteRecordInfo<'/settings', '/settings', Record<never, never>, Record<never, never>>,
    '/terms': RouteRecordInfo<'/terms', '/terms', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/[type]s/index.vue': {
      routes: '/[type]s/'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/index.vue': {
      routes: '/[type]s/[namespace]/[name]/'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/blob/[branch]/[...file].vue': {
      routes: '/[type]s/[namespace]/[name]/blob/[branch]/[...file]'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/commit/[commit_id].vue': {
      routes: '/[type]s/[namespace]/[name]/commit/[commit_id]'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/commits/[branch]/index.vue': {
      routes: '/[type]s/[namespace]/[name]/commits/[branch]/'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/edit/[branch]/[...file].vue': {
      routes: '/[type]s/[namespace]/[name]/edit/[branch]/[...file]'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/settings.vue': {
      routes: '/[type]s/[namespace]/[name]/settings'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/tree/[branch]/index.vue': {
      routes: '/[type]s/[namespace]/[name]/tree/[branch]/'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/tree/[branch]/[...path].vue': {
      routes: '/[type]s/[namespace]/[name]/tree/[branch]/[...path]'
      views: never
    }
    'src/pages/[type]s/[namespace]/[name]/upload/[branch].vue': {
      routes: '/[type]s/[namespace]/[name]/upload/[branch]'
      views: never
    }
    'src/pages/[username]/index.vue': {
      routes: '/[username]/'
      views: never
    }
    'src/pages/[username]/[type].vue': {
      routes: '/[username]/[type]'
      views: never
    }
    'src/pages/[username]/storage.vue': {
      routes: '/[username]/storage'
      views: never
    }
    'src/pages/about.vue': {
      routes: '/about'
      views: never
    }
    'src/pages/contributing.vue': {
      routes: '/contributing'
      views: never
    }
    'src/pages/docs/index.vue': {
      routes: '/docs/'
      views: never
    }
    'src/pages/docs/admin.vue': {
      routes: '/docs/admin'
      views: never
    }
    'src/pages/docs/api.vue': {
      routes: '/docs/api'
      views: never
    }
    'src/pages/docs/cli.vue': {
      routes: '/docs/cli'
      views: never
    }
    'src/pages/docs/contributing.vue': {
      routes: '/docs/contributing'
      views: never
    }
    'src/pages/docs/deployment.vue': {
      routes: '/docs/deployment'
      views: never
    }
    'src/pages/docs/git.vue': {
      routes: '/docs/git'
      views: never
    }
    'src/pages/docs/ports.vue': {
      routes: '/docs/ports'
      views: never
    }
    'src/pages/docs/setup.vue': {
      routes: '/docs/setup'
      views: never
    }
    'src/pages/get-started.vue': {
      routes: '/get-started'
      views: never
    }
    'src/pages/login.vue': {
      routes: '/login'
      views: never
    }
    'src/pages/new.vue': {
      routes: '/new'
      views: never
    }
    'src/pages/organizations/index.vue': {
      routes: '/organizations/'
      views: never
    }
    'src/pages/organizations/[orgname]/index.vue': {
      routes: '/organizations/[orgname]/'
      views: never
    }
    'src/pages/organizations/[orgname]/[type].vue': {
      routes: '/organizations/[orgname]/[type]'
      views: never
    }
    'src/pages/organizations/[orgname]/settings.vue': {
      routes: '/organizations/[orgname]/settings'
      views: never
    }
    'src/pages/organizations/[orgname]/storage.vue': {
      routes: '/organizations/[orgname]/storage'
      views: never
    }
    'src/pages/organizations/new.vue': {
      routes: '/organizations/new'
      views: never
    }
    'src/pages/privacy.vue': {
      routes: '/privacy'
      views: never
    }
    'src/pages/register.vue': {
      routes: '/register'
      views: never
    }
    'src/pages/self-hosted.vue': {
      routes: '/self-hosted'
      views: never
    }
    'src/pages/settings.vue': {
      routes: '/settings'
      views: never
    }
    'src/pages/terms.vue': {
      routes: '/terms'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
